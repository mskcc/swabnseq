{"version":3,"sources":["resources/swab_n_seq_card.png","resources/constants.js","config.js","components/common/download.js","components/graph.js","services/resultsService.js","components/common/update.js","components/my-data.js","components/all-graphs.js","components/description.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","taxonomic_mapping","MAIN_GRAPH_SUMMARY","MAIN_GRAPH_INDIVIDUAL","config","root","service","DownloadFile","props","downloadEmployeeData","id","fetch","sampleId","then","response","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","click","onClick","this","className","icon","faDownload","React","Component","PieChart","slices","sliceList","filter","entry","org","level","title","length","identifier","counts","orgs","slice","push","data","type","values","labels","layout","width","height","showlegend","showDownload","parseResp","resp","getRecordResults","axios","get","catch","console","log","Update","update","MyData","useState","setId","setData","setUpdate","onSubmit","evt","preventDefault","val","err","isNaN","error","record","name","onChange","target","value","src","Card","alt","AllGraphs","setLevel","mainGraph","setMainGraph","min","setMin","max","setMax","graphTitle","Row","Col","xs","sm","FormControl","component","FormLabel","RadioGroup","aria-label","event","FormControlLabel","control","Radio","label","ToggleButtonGroup","exclusive","ToggleButton","summaryGraph","sections","graphs","selectors","i","first","last","selected","selector","key","getSelectors","map","graph","idx","md","xl","Description","rel","App","summary","setSummary","results","setResults","useEffect","s","r","to","exact","path","render","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc4ac6d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/swab_n_seq_card.063e033b.png\";","export const taxonomic_mapping = {\n    \"s\": \"Species\",\n    \"g\": \"Genus\",\n    \"f\": \"Family\",\n    \"o\": \"Order\",\n    \"c\": \"Class\",\n    \"p\": \"Phylum\"\n};\n\nexport const MAIN_GRAPH_SUMMARY = 'summary';\nexport const MAIN_GRAPH_INDIVIDUAL = 'individual';","const config = {\n    root: '/swabnseq/',\n    service: '/swabnseq/'\n};\nexport default config;","import React from 'react';\nimport config from '../../config';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faDownload } from '@fortawesome/free-solid-svg-icons';\nimport axios from \"axios\";\n\nclass DownloadFile extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    downloadEmployeeData = (id) => {\n        fetch(`${config.service}/download?id=${this.props.sampleId}`)\n            .then(response => {\n                response.blob().then(blob => {\n                    let url = window.URL.createObjectURL(blob);\n                    let a = document.createElement('a');\n                    a.href = url;\n                    a.download = `swabNseq.csv`;\n                    a.click();\n                })\n            });\n    };\n\n    render() {\n        return (\n            <div id=\"container\">\n                <a href=\"#\" onClick={this.downloadEmployeeData}>\n                    <FontAwesomeIcon className={\"download-icon\"} icon={faDownload}/>\n                </a>\n            </div>\n        )\n    }\n\n}\n\nexport default DownloadFile;","import React from 'react';\nimport Plot from '../../node_modules/react-plotly.js/react-plotly';\nimport { taxonomic_mapping } from \"../resources/constants\";\nimport DownloadFile from \"./common/download\";\n\nfunction PieChart(props) {\n    // Only use slices that have been identified at the input taxonomic level\n    const slices = props.sliceList.filter((entry) => {\n        return entry.org[props.level];\n    });\n\n    const title = props.sampleId;\n\n    if(slices.length === 0){\n        const identifier = title !== '' ? `for ${title} ` : '';\n\n        return <div className={\"center pos-abs\"}>\n            <p className={\"text-align-center\"}>No data {identifier}at {taxonomic_mapping[props.level]} level</p>\n        </div>\n    }\n\n    const counts = [];\n    const orgs = [];\n    for(const slice of slices){\n        orgs.push(slice['org'][props.level]);\n        counts.push(slice['count']);\n    }\n\n    const showDownload = () => {\n        if(!props.showDownload) return <div></div>\n        return <div className={\"download-container\"}>\n            <DownloadFile sampleId={props.sampleId}/>\n        </div>\n\n\n    };\n\n    return (\n        <div>\n            <Plot\n                data={[\n                    {\n                        type: 'pie',\n                        values: counts,\n                        labels: orgs,\n                    },\n                ]}\n                layout={ {\n                    width: props.width,\n                    height: props.height,\n                    title: title,\n                    showlegend: props.showlegend\n                } }\n                className={'hor-align'}\n            />\n            {showDownload()}\n        </div>\n    );\n};\n\nexport default PieChart;","import axios from \"axios\";\nimport config from '../config';\n\nconst parseResp = (resp) => {\n    const payload = resp.data || {};\n    return payload;\n};\n\n/**\n * Sends service call to retrieve all the results from swabNseq\n */\nexport function getAllResults() {\n    return axios\n        .get(`${config.service}/allresults`)\n        .then(resp => { return parseResp(resp) })\n        .catch(console.log);\n}\n\n/**\n * Sends service call to retrieve the individual results\n */\nexport const getRecordResults = (id) => {\n    return axios.get(`${config.service}/getRecord?id=${id}`)\n        .then(parseResp)\n        .catch(console.log)\n};\n","import React from 'react';\n\nfunction Update(props) {\n    if(props.update){\n        return <div className={\"update\"}><p>{props.update}</p></div>;\n    }\n    return <div></div>\n};\n\nexport default Update;","import React, { useState } from \"react\";\nimport PieChart from \"./graph\";\nimport Card from \"../resources/swab_n_seq_card.png\";\nimport {getRecordResults} from \"../services/resultsService\";\nimport Update from './common/update';\nfunction MyData(props) {\n    const [id, setId] = useState(null);\n    const [data, setData] = useState([]);\n    const [update, setUpdate] = useState(null);\n\n    const onChange = (evt) => {\n        const val = evt.target.value;\n        setId(val);\n    };\n\n    const getErrorInValue = (val) => {\n        if(val === ''){\n            return 'Please enter a value'\n        }\n        if(isNaN(val)){\n            return 'Please enter the numerical id. For instance, enter \"23\" for \"SNS_23\"'\n        }\n    };\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n\n        const err = getErrorInValue(id);\n        if(err){\n            setUpdate(err);\n            return;\n        }\n        setUpdate(`Fetching data for ${id}`);\n        getRecordResults(id)\n            .then((resp) => {\n                if(resp.error){\n                    setUpdate(resp.error);\n                    return;\n                }\n                const data = resp.record || [];\n                setData(data);\n                setUpdate(null);\n            })\n            .catch(console.log)\n    };\n\n    if(data.length > 0) return <div className={\"pos-rel\"}>\n        <PieChart\n            sliceList={data}\n            sampleId={id}\n            width={800}\n            height={550}\n            showlegend={true}\n            level={props.level}\n            showDownload={true}/>\n    </div>;\n\n    return <div>\n        <p>\n            To access your data, enter the numerical id found on your swabNseq card.\n            For instance, enter \"23\" for \"SNS_23\"</p>\n        <div className={'sid-card pos-rel'}>\n            <form onSubmit={handleSubmit}\n                  className={'id-entry pos-abs'}>\n                <label>\n                    <p>Enter your ID number: </p>\n                </label>\n                <input type=\"text\" name=\"name\" className=\"id-entry-input\" onChange={onChange}/>\n                <input type=\"submit\" value=\"Submit\" />\n            </form>\n            <img className={'sid-card inline-block'}\n                 src={Card}\n                 alt={'swabNseqIdCard'}/>\n            <div className={\"update-container\"}>\n                <Update update={update}/>\n            </div>\n        </div>\n    </div>\n}\n\nexport default MyData;","import React, {useState} from 'react';\nimport PieChart from \"./graph\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport {taxonomic_mapping, MAIN_GRAPH_SUMMARY, MAIN_GRAPH_INDIVIDUAL} from '../resources/constants';\nimport MyData from \"./my-data\";\nimport DownloadFile from \"./common/download\";\n\nfunction AllGraphs(props) {\n    const [level, setLevel] = useState('g');    // Level of classification to use - k, p, c, o , f, g, s\n    const [mainGraph, setMainGraph] = useState(MAIN_GRAPH_INDIVIDUAL);  // SUMMARY/INDIVIDUAL\n    const [min, setMin] = useState(0);\n    const [max, setMax] = useState(9);\n\n    const handleChange = event => {\n        setLevel(event.target.value);\n    };\n\n    const getSelectors = () => {\n        const len = 9;\n        const sections = props.graphs.length/len;\n        const selectors = [];\n        for(let i = 0; i<sections; i++){\n            const first = i*len;\n            const last = (i+1)*len;\n            const f = () => {\n                setMin(first);\n                setMax(last);\n            };\n\n            const selected = (first === min && last === max)? ' selected' : '';\n            const selector = <div onClick={f}\n                                  className={\"hover graph-section-selector\" + selected}\n                                  key={`${first}-${last}`}>\n                                    <p>{first}-{last}</p>\n                             </div>;\n            selectors.push(selector);\n        }\n        return selectors;\n    };\n\n    const getMainGraph = () => {\n        if(mainGraph === MAIN_GRAPH_SUMMARY){\n            return <PieChart {...props}\n                             sliceList={props.summaryGraph[level] || []}\n                             sampleId={\"\"}\n                             width={850}\n                             height={550}\n                             showlegend={true}\n                             level={level}\n                             showDownload={false}/>\n        }\n        return <MyData {...props} level={level}/>\n    };\n\n    const handleAlignment = (event, val) => {\n        setMainGraph(val);\n    };\n\n    const graphTitle = mainGraph === MAIN_GRAPH_SUMMARY ? 'Summary Statistics' : 'My Data';\n\n    return <div>\n        <div className={\"summary-statistics-container pos-rel\"}>\n            <Row>\n                <Col xs={12} sm={4} className={'toggle-container z-index-1'}>\n                    <FormControl component=\"fieldset\">\n                        <FormLabel component=\"legend\">Taxonomic Rank</FormLabel>\n                        <RadioGroup aria-label=\"taxonomic-rank\" name=\"taxRank\" value={level} onChange={handleChange}>\n                            <FormControlLabel value=\"s\" control={<Radio/>} label={taxonomic_mapping['s']} />\n                            <FormControlLabel value=\"g\" control={<Radio />} label={taxonomic_mapping['g']}/>\n                            <FormControlLabel value=\"f\" control={<Radio />} label={taxonomic_mapping['f']}/>\n                            <FormControlLabel value=\"o\" control={<Radio />} label={taxonomic_mapping['o']}/>\n                            <FormControlLabel value=\"c\" control={<Radio />} label={taxonomic_mapping['c']}/>\n                            <FormControlLabel value=\"p\" control={<Radio />} label={taxonomic_mapping['p']}/>\n                        </RadioGroup>\n                    </FormControl>\n                    <div className={\"main-graph-toggle\"}>\n                        <ToggleButtonGroup\n                            value={mainGraph}\n                            exclusive\n                            onChange={handleAlignment}\n                            aria-label=\"mainGraph toggle\">\n                            <ToggleButton value=\"summary\" aria-label=\"mainGraph summary\" className={\"main-graph-toggle-buttons\"}>\n                                <p className={\"margin-0\"}>Summary</p>\n                            </ToggleButton>\n                            <ToggleButton value=\"individual\" aria-label=\"mainGraph myData\" className={\"main-graph-toggle-buttons\"}>\n                                <p className={\"margin-0\"}>My Data</p>\n                            </ToggleButton>\n                        </ToggleButtonGroup>\n                    </div>\n                </Col>\n                <Col xs={12} sm={8}\n                     className={'main-graph-container'}>\n                    <h1 className={'text-align-center'}>{graphTitle}</h1>\n                    {getMainGraph()}\n                </Col>\n            </Row>\n        </div>\n        <div>\n            <h1 className={'text-align-center'}>Individual Graphs</h1>\n            <p>Below are the annonymized graphs for all sequencing runs of the graph data. They are presented in a random order.</p>\n            {getSelectors()}\n        </div>\n        <Row>\n            {\n                props.graphs.slice(min,max).map((graph, idx)=>{\n                    return <Col xs={12} md={6} xl={4}\n                                key={`Graph-${idx}`}\n                                className={\"pos-rel\"}>\n                        <PieChart {...props}\n                                  sliceList={graph}\n                                  sampleId={`Graph-${min+idx}`}\n                                  width={340}\n                                  height={550}\n                                  showlegend={false}\n                                  level={level}\n                                  showDownload={false}/>\n                    </Col>\n                })\n            }\n        </Row>\n    </div>\n};\n\nexport default AllGraphs;","import React from 'react';\n\nfunction Description(props) {\n    return (\n        <div>\n            <h1 className={'text-align-center'}>About</h1>\n            <h2>Overview</h2>\n            <div className={'padding-top-20'}>\n                <p>\n                    This data was generated as part of IGO's 2019 Open House.\n                    We asked visitors for their voluntary participation to \"swab\" their mobile phones to collect microorganisms associated with their personal device.\n                    They received an annonymized identification number they could use to obtain their sequencing results, which are available on the <a href={\"https://igo.mskcc.org/swabnseq\"} target=\"_blank\" rel=\"noopener noreferrer\">Data</a> page.\n                </p>\n            </div>\n            <h2>Extraction/Sequencing</h2>\n            <div className={'padding-top-20'}>\n                <p>\n                    DNA was extracted directly from swabs. Samples were extracted using the Extract-N-Amp Plant PCR kit (Sigma Aldrich). Each swab tip was added to 100 µl of extraction solution, heated for 10 min at 95 °C, and 100 µl of dilution solution added. Finally, the V4 region of bacterial 16S rRNA gene was amplified and prepped for amplicon sequencing <a href={\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4081285/#ref-16\"} target=\"_blank\" rel=\"noopener noreferrer\">(Flores, Henley & Fierer, 2012)</a>\n                </p>\n            </div>\n            <h2>Data</h2>\n            <div className={'padding-top-20'}>\n                <p>\n                    Data was generated using the open-source bioinformatics tool, <a href={\"https://qiime2.org/\"} target=\"_blank\" rel=\"noopener noreferrer\">Qiime</a>.\n                </p>\n            </div>\n            <h2>Contact</h2>\n            <div className={'padding-top-20'}>\n                <p>Email <a href=\"mailto:genomics@mskcc.org\">genomics@mskcc.org</a> for questions or to book a consultation</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Description;","import React, {useState, useEffect} from 'react';\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport AllGraphs from './components/all-graphs.js';\nimport Description from './components/description.js';\nimport { getAllResults } from \"./services/resultsService\";\nimport config from './config.js';\n\nfunction App() {\n    const [summary, setSummary] = useState([]);\n    const [results, setResults] = useState([]);\n\n    useEffect( () => {\n        getAllResults()\n            .then((resp) => {\n                const s = resp.summary || {};\n                const r = resp.results;\n                if(s) setSummary(s);\n                if(r) setResults(r);\n            })\n            .catch(console.log);\n    }, []);\n\n  return (\n    <div>\n        <Router>\n            <header className=\"App-header\">\n                <div className={\"margin-left-40\"}>\n                    <Link className={\"header-tab\"} to={`${config.root}`}>\n                        <h1 className={'white'}>Data</h1>\n                    </Link>\n                    <Link className={\"header-tab\"} to={`${config.root}about`}>\n                        <h1 className={'white'}>About</h1>\n                    </Link>\n                    <div className={'logo-container'}>\n                        <p className={'logo-text inline-block'}>Integrated Genomics Operation</p>\n                        <a href={\"https://igo.mskcc.org/\"} target={\"_blank\"}>\n                        <img className={'logo inline-block'}\n                             src={'https://i.imgur.com/olnUkdu.png'}\n                             alt={'igo-logo'}/>\n                        </a>\n                    </div>\n                </div>\n            </header>\n            <div className={\"body-container margin-top-15 padding-hor-5per\"}>\n                <Switch>\n                    <Route exact path={`${config.root}`}\n                           render={(props) =>\n                               <AllGraphs {...props}\n                                          graphs={results}\n                                          summaryGraph={summary}/>\n                           }\n                    />\n                    <Route path={`${config.root}about`}\n                           render={(props) =>\n                               <Description/>\n                           }\n                    />\n                </Switch>\n            </div>\n        </Router>\n        <footer></footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}